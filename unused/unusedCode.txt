#include <poll.h>

// fd should be open with O_NONBLOCK

bool FifoServer::Runnable::waitRequest() {
  unsigned rep = 0;
  do {
    errno = 0;
    pollfd pfd{ _fdRead, POLLIN, -1 };
    pfd.revents = 0;
    int presult = poll(&pfd, 1, -1);
    if (presult <= 0) {
      std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __func__
		<< '-' << std::strerror(errno) << std::endl;
      if (errno == EINTR)
	continue;
      return false;
    }
    else if (pfd.revents & POLLERR) {
      std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __func__
		<< '-' << std::strerror(errno) << std::endl;
      return false;
    }
    else if (pfd.revents & POLLHUP) {
      if (!stopFlag)
	std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __func__
		  << ":POLLHUP detected " << _fifoName << std::endl;
      close(_fdRead);
      _fdRead = -1;
      close(_fdWrite);
      _fdWrite = -1;
      return false;
    }
  } while (errno == EINTR && rep++ < 3 && !stopFlag);
  return !stopFlag;
}

// INPUT can be a string or string_view or vector<char>
// OUTPUT a string or string_view or vector<char>
template <typename INPUT, typename OUTPUT>
  void split(const INPUT& input, std::vector<OUTPUT>& lines, char delim = '\n') {
    auto start = input.cbegin();
    auto end = input.cend();
    auto next = std::find(start, end, delim);
    while (next != end) {
      if (next > start + 1)
	lines.emplace_back(start, next);
      start = next + 1;
      next = std::find(start, end, delim);
    }
    if (next > start + 1)
      lines.emplace_back(start, next);
}


    _winningBid = *std::max_element(_bids.cbegin(), _bids.cend(),
				    [] (const AdBid& bid1, const AdBid& bid2) {
				      return std::get<static_cast<unsigned>(BID_INDEX::BID_MONEY)>(bid1)
					< std::get<static_cast<unsigned>(BID_INDEX::BID_MONEY)>(bid2);
				    });


flags = fcntl(fd,F_GETFL,0);
flags &= ~O_NONBLOCK;
fcntl(fd, F_SETFL, flags);


  //auto flags = fcntl(_fdWrite, F_GETFL, 0);
  //flags &= O_NONBLOCK;
  //fcntl(_fdWrite, F_SETFL, flags);

ssize_t Fifo::getDefaultPipeSize() {
  std::string_view testPipeName = "/tmp/testpipe";
  if (mkfifo(testPipeName.data(), 0620) == -1 && errno != EEXIST) {
    std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __func__ << '-'
	      << std::strerror(errno) << '-' << testPipeName << std::endl;
    return -1;
  }
  int fd = open(testPipeName.data(), O_RDWR);
  if (fd == -1) {
    std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __func__ << '-'
	      << std::strerror(errno) << '-' << testPipeName << std::endl;
    return -1;
  }
  ssize_t pipeSize = fcntl(fd, F_GETPIPE_SZ);
  if (pipeSize == -1) {
    std::cerr << __FILE__ << ':' << __LINE__ << ' ' << __func__ << '-'
	      << std::strerror(errno) << '-' << testPipeName << std::endl;
    return -1;
  }
  close(fd);
  return pipeSize;
}
